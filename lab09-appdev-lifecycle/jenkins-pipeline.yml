apiVersion: v1
kind: Template
metadata:
  annotations:
    description: blue green pipeline - build deploy dev and promote to prod
    iconClass: icon-jenkins
    version: '2.0'
  name: blue-green-pipeline
labels:
  template: blue-green-pipeline
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  required: true
  value: beer-api
- name: DEV_NS
  displayName: Development Project Name Space
  required: true
  value: apps
- name: PROD_NS
  displayName: Production Project Name Space
  required: true
  value: apps-prod
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${APPLICATION_NAME}-pipeline", "kind": "DeploymentConfig"}]'
    labels:
      name: ${APPLICATION_NAME}-pipeline
      template: ${APPLICATION_NAME}-pipeline
    name: ${APPLICATION_NAME}-pipeline
  spec:
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |
          node() {
            env.devns = "${DEV_NS}";
            env.prodns = "${PROD_NS}";
            env.appname = "${APPLICATION_NAME}";
            stage('build') {
              print 'building ${env.appname}'
            }
            stage ('promotionCheck'){
              def userInput = input( id: "userInput", message: "Promote ${env.appname} to PROD?", parameters:
                [ [$class: "TextParameterDefinition", defaultValue: "Comments?", description: "comments", name: "comments"] ])
              print 'promotionCheck'
            }
            stage ('tagForProd'){
              sh "oc tag ${env.devns}/${env.appname}:latest ${env.prodns}/${env.appname}:ready-for-prod"
            }
            stage ('deployOnNewTarget'){
              sh "oc project ${env.prodns}"
              sh "oc get route ${env.appname} -o template --template='{{ .spec.to.name }}'> route-target"
              // Determine which is of green or blue is active
              def newTarget = getNewTarget()
              def currentTarget = getCurrentTarget()
              sh "oc rollout latest dc/${newTarget}"
              sh "oc rollout status -w dc/${newTarget}"
              input "Switch Production from ${currentTarget} to ${newTarget} ?"
              sh "oc patch route/${env.appname} --patch '{\"spec\":{\"to\":{\"name\":\"${newTarget}\"}}}'"
            }
          }

          // Get the current target of the OpenShift production route
          // Note: the route-target file is created earlier by the "oc get route" command
          def getCurrentTarget() {
              def currentTarget = readFile 'route-target'
              return currentTarget
          }

          // Flip/flop target (green goes blue and vice versa)
          def getNewTarget() {
              def currentTarget = getCurrentTarget()
              def newTarget = ""
              if (currentTarget == "beer-api-blue") {
                  newTarget = "beer-api-green"
              } else if (currentTarget == "beer-api-green") {
                  newTarget = "beer-api-blue"
              } else {
                  echo "OOPS, wrong target"
              }
              return newTarget
          }
      type: JenkinsPipeline
