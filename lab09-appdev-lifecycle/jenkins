node('maven') {
def mvn = "mvn -s mvn-settings.xml"
            /*env.devns = "${DEV_NS}";
            /env.prodns = "${PROD_NS}";
            env.appname = "${APPLICATION_NAME}";*/
            env.nexusMirror = "http://172.17.0.1:5081/repository/maven-public/";

            stage('checkoutSource') {
              git url: "https://github.com/alainpham/agilabs.git"
              
              print """Checking out source setting nexus mirror to ${env.nexusMirror}"""
                 // Generate the maven settings file from parameters
              writeFile file: 'mvn-settings.xml', text: """
<?xml version="1.0"?>
<settings>
  <mirrors>
    <mirror>
      <id>Nexus</id>
      <name>Nexus Public Mirror</name>
      <url>${env.nexusMirror}</url>
      <mirrorOf>*</mirrorOf>
    </mirror>
  </mirrors>
</settings>
"""
            }
            stage('build') {
              print 'building projects'
              sh "cd lab09-appdev-lifecycle/beer-api && oc project fuse && ${mvn} -P ocp -DskipTests fabric8:deploy"
            }
            stage ('promotionCheck'){
              def userInput = input( id: "userInput", message: "Promote to PROD?", parameters:
                [ [$class: "TextParameterDefinition", defaultValue: "Comments?", description: "comments", name: "comments"] ])
              print 'promotionCheck'
            }
            stage('tagForProd'){
                openshiftTag alias: 'false', destStream: 'beer-api', srcTag: "latest",
                 destinationNamespace: 'fuse-prod', namespace: 'fuse',
                 srcStream: 'beer-api', destTag: 'ready-for-prod', verbose: 'false'
            }
            stage('deployOnNewTarget'){
                sh "oc project fuse-prod"
                sh "oc get route beer-api -o template --template='{{ .spec.to.name }}'> route-target"
                
                    // Determine which is of green or blue is active
                    def newTarget = getNewTarget()
                    def currentTarget = getCurrentTarget()
                    
                     // Trigger a new deployment
                        openshiftDeploy deploymentConfig: "${newTarget}", namespace: 'fuse-prod'
                        openshiftVerifyDeployment deploymentConfig: "${newTarget}", namespace: 'fuse-prod'

                    
                    input "Switch Production from ${currentTarget} to ${newTarget} ?"
                    sh "oc patch route/beer-api --patch '{\"spec\":{\"to\":{\"name\":\"${newTarget}\"}}}'"

            }
            
          }
          
          
          // Get the current target of the OpenShift production route
// Note: the route-target file is created earlier by the "oc get route" command
def getCurrentTarget() {
  def currentTarget = readFile 'route-target'
  return currentTarget
}

// Flip/flop target (green goes blue and vice versa)
def getNewTarget() {
  def currentTarget = getCurrentTarget()
  def newTarget = ""
  if (currentTarget == "beer-api-blue") {
      newTarget = "beer-api-green"
  } else if (currentTarget == "beer-api-green") {
      newTarget = "beer-api-blue"
  } else {
    echo "OOPS, wrong target"
  }
  return newTarget
}
